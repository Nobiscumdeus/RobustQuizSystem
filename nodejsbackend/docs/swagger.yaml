
openapi: 3.0.3
info:
  title: My API
  version: 1.0.0
servers:
  - url: http://localhost:5000

paths:
  /register:
    post:
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                email:
                  type: string
                password:
                  type: string
                firstName:
                  type: string
              required:
                - username
                - email
                - password
      responses:
        '201':
          description: User registered successfully
        '400':
          description: Username or Email already exists

  /login:
    post:
      summary: Login user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
              required:
                - email
                - password
      responses:
        '200':
          description: Successful login
        '400':
          description: Invalid credentials

  /logout:
    post:
      summary: Logout user
      responses:
        '200':
          description: Logged out successfully

  /refresh:
    post:
      summary: Refresh access token
      responses:
        '200':
          description: New access token
        '401':
          description: Invalid or expired refresh token

    /profile:
    get:
      summary: Get user profile
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Profile fetched successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      id:
                        type: integer
                      firstName:
                        type: string
                      lastName:
                        type: string
                      username:
                        type: string
                      email:
                        type: string
                      phone:
                        type: string
                      avatarUrl:
                        type: string
                      role:
                        type: string
                        enum: [student, examiner]
                      isActive:
                        type: boolean
                      lastLogin:
                        type: string
                        format: date-time
                      stats:
                        type: object
                        properties:
                          examsCompleted:
                            type: integer
                          averageScore:
                            type: number
                          studentsManaged:
                            type: integer
                          examsCreated:
                            type: integer
                      profileCompletion:
                        type: integer
                        description: Profile completion percentage
                  message:
                    type: string
        '401':
          description: Unauthorized - Invalid or missing token
        '404':
          description: User not found
        '500':
          description: Server error

    put:
      summary: Update user profile
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                firstName:
                  type: string
                  example: "John"
                lastName:
                  type: string
                  example: "Doe"
                phone:
                  type: string
                  example: "+1234567890"
                avatarUrl:
                  type: string
                  example: "https://example.com/avatar.jpg"
      responses:
        '200':
          description: Profile updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      id:
                        type: integer
                      firstName:
                        type: string
                      lastName:
                        type: string
                      phone:
                        type: string
                      avatarUrl:
                        type: string
                      updatedAt:
                        type: string
                        format: date-time
                  message:
                    type: string
                    example: "Profile updated successfully"
        '401':
          description: Unauthorized - Invalid or missing token
        '500':
          description: Server error

  /students:
    get:
      summary: Get all students
      responses:
        '200':
          description: A list of students
    post:
      summary: Create a new student
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                email:
                  type: string
              required:
                - name
                - email
      responses:
        '201':
          description: Student created
        '400':
          description: Invalid input

  /students/{id}:
    get:
      summary: Get a student by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Student found
        '404':
          description: Student not found
    put:
      summary: Update a student
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                email:
                  type: string
      responses:
        '200':
          description: Student updated
        '404':
          description: Student not found
    delete:
      summary: Delete a student
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Student deleted
        '404':
          description: Student not found

  /exams:
    get:
      summary: Get all exams
      responses:
        '200':
          description: A list of exams
    post:
      summary: Create a new exam
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                date:
                  type: string
                  format: date
              required:
                - title
                - date
      responses:
        '201':
          description: Exam created
        '400':
          description: Invalid input

  /exams/{id}:
    get:
      summary: Get an exam by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Exam found
        '404':
          description: Exam not found
    put:
      summary: Update an exam
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                date:
                  type: string
                  format: date
      responses:
        '200':
          description: Exam updated
        '404':
          description: Exam not found
    delete:
      summary: Delete an exam
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Exam deleted
        '404':
          description: Exam not found
  
  # Course Management Endpoints
  /courses:
    post:
      summary: Create a new course
      tags: [Courses]
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  example: "Advanced Biology"
                code:
                  type: string
                  example: "BIO301"
                description:
                  type: string
                  example: "Advanced concepts in biological sciences"
                examinerId:
                  type: integer
                  example: 1
              required:
                - title
                - examinerId
      responses:
        '201':
          description: Course created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  course:
                    type: object
                    properties:
                      id:
                        type: integer
                      title:
                        type: string
                      code:
                        type: string
                      description:
                        type: string
        '400':
          description: Invalid input or missing required fields
        '409':
          description: Course already exists

  /courses/{examinerId}:
    get:
      summary: Get all courses by examiner
      tags: [Courses]
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: examinerId
          required: true
          schema:
            type: integer
          description: The examiner's ID
      responses:
        '200':
          description: Courses retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  courses:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                        title:
                          type: string
                        code:
                          type: string
                        description:
                          type: string
                        createdAt:
                          type: string
                          format: date-time
        '404':
          description: No courses found for this examiner

  /singlecourse/{courseId}:
    get:
      summary: Get detailed course information by ID
      tags: [Courses]
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: courseId
          required: true
          schema:
            type: integer
          description: The course ID
      responses:
        '200':
          description: Course details retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  course:
                    type: object
                    properties:
                      id:
                        type: integer
                      title:
                        type: string
                      code:
                        type: string
                      description:
                        type: string
                      examiner:
                        type: object
                      courseStudents:
                        type: array
                      exams:
                        type: array
                      questions:
                        type: array
                  stats:
                    type: object
                    properties:
                      totalStudents:
                        type: integer
                      totalExams:
                        type: integer
                      totalQuestions:
                        type: integer
        '404':
          description: Course not found or unauthorized

  /course/{courseId}/edit:
    get:
      summary: Get course data for editing
      tags: [Courses]
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: courseId
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Course edit data retrieved successfully
        '404':
          description: Course not found or not owned by examiner

  /course/{courseId}:
    put:
      summary: Update course information
      tags: [Courses]
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: courseId
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                code:
                  type: string
                description:
                  type: string
                creditHours:
                  type: integer
                semester:
                  type: string
                isActive:
                  type: boolean
      responses:
        '200':
          description: Course updated successfully
        '404':
          description: Course not found or unauthorized

  /courses/{courseId}:
    delete:
      summary: Delete a course and all associated data
      tags: [Courses]
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: courseId
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Course deleted successfully
        '403':
          description: Not authorized to delete this course
        '404':
          description: Course not found

  /courses-exams/examiner/{examinerId}:
    get:
      summary: Get courses and exams for registration
      tags: [Courses]
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: examinerId
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Courses and exams retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  courses:
                    type: array
                  exams:
                    type: array

  /students/not-in-course/{courseId}:
    get:
      summary: Get students not enrolled in a specific course
      tags: [Courses]
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: courseId
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Students retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  students:
                    type: array
                  total:
                    type: integer
        '404':
          description: Course not found or unauthorized

  /courses/{courseId}/students:
    post:
      summary: Add multiple students to a course
      tags: [Courses]
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: courseId
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                studentIds:
                  type: array
                  items:
                    type: integer
                  example: [1, 2, 3, 4]
              required:
                - studentIds
      responses:
        '201':
          description: Students added to course successfully
        '400':
          description: Invalid input or students already enrolled

  /courses/{courseId}/students/{studentId}:
    delete:
      summary: Remove a student from a course
      tags: [Courses]
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: courseId
          required: true
          schema:
            type: integer
        - in: path
          name: studentId
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Student removed from course successfully
        '404':
          description: Course or student not found

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

components:components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT