// Define the database provider and the datasource
datasource db {
  provider = "postgresql" // Use PostgreSQL as the database provider
  url      = env("DATABASE_URL") // Database URL from the .env file
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id        Int       @id @default(autoincrement())
  username  String    @unique
  email     String    @unique
  firstName String?
  password  String
  role      String // 'examiner' or 'student'
  students  Student[] // Relationship: A user can have multiple students if they are an examiner
  exams     Exam[] // Relationship: A user can create multiple exams if they are an examiner
  createdAt DateTime  @default(now()) // Timestamp when the user is created
  updatedAt DateTime  @updatedAt // Automatically updated when the user is modified
  courses   Course[]  @relation("CourseExaminer") // If this user is an examiner, they can have multiple courses

  questions Question[] // A user (examiner) can create multiple questions 

  //updated schema
  notifications Notification[] // Add this line
  lastName      String? // Missing from current schema
  phone         String? // Useful for contact
  avatarUrl     String? // For profile pictures
  isActive      Boolean        @default(true) // To disable/enable accounts
  lastLogin     DateTime? // Track user activity

  @@index([email]) // Optimizes email lookups
}

model Student {
  id         Int          @id @default(autoincrement())
  matricNo   String       @unique
  firstName  String
  lastName   String
  examinerId Int
  examiner   User         @relation(fields: [examinerId], references: [id])
  exams      Exam[]       @relation("ExamStudents") // Relationship to exams (define reverse relation in Exam)
  results    ExamResult[] // Relationship to exam results
  courses    Course[] // Many-to-many relationship with courses
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt

  // âœ… FIX: explicit many-to-many relationship
  courseStudents CourseStudent[] // Replace: courses Course[]

  //updated schema 
  attendances  Attendance[] // Add this line
  email        String? // Student contact email
  phone        String? // Student contact phone
  department   String? // Academic department
  level        String? // e.g., "100", "200", etc.
  isActive     Boolean       @default(true)
  lastActive   DateTime? // Last activity timestamp
  examSessions ExamSession[] // âœ… back-reference

  @@index([matricNo]) // Faster matric number searches
  @@index([createdAt]) // Better sorting by creation date
  @@index([firstName, lastName])
}

model Exam {
  id         Int      @id @default(autoincrement())
  title      String
  date       DateTime
  password   String
  duration   Int // Duration in minutes
  examinerId Int
  examiner   User     @relation(fields: [examinerId], references: [id]) // Relationship to examiner (User)

  examQuestions ExamQuestion[]
  students      Student[]      @relation("ExamStudents") // Many-to-many relationship with students
  results       ExamResult[] // One exam can have many results (students' results)
  courseId      Int
  course        Course         @relation(fields: [courseId], references: [id]) // Relationship to the Course
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  examSessions      ExamSession[] // âœ… back-reference
  questionAnalytics QuestionAnalytics[] // âœ… back-reference

  // Add these new fields:
  state       ExamState @default(DRAFT)
  publishedAt DateTime?
  activatedAt DateTime?
  completedAt DateTime?

  //updated schema
  attendances Attendance[] // Add this line

  description        String? // Exam description
  instructions       String? // Special instructions
  isPublished        Boolean   @default(false) // Control exam visibility
  startTime          DateTime? // Specific start time
  endTime            DateTime? // Specific end time
  maxAttempts        Int       @default(1) // Number of allowed attempts
  passingScore       Float     @default(60.0) // Minimum passing score
  proctoringSettings Json? // Store proctoring configuration

  @@index([examinerId]) // Speeds up examiner-based queries
  @@index([title])
  @@index([courseId]) // Index the foreign key
}

model Question {
  id Int @id @default(autoincrement())

  // Primary relationship: Questions belong to COURSES
  courseId Int
  course   Course? @relation(fields: [courseId], references: [id])

  // Question content
  questionText  String
  questionType  QuestionType
  options       String[]
  correctAnswer String
  imageUrl      String?
  category      CategoryType?
  tags          String[]
  difficulty    String?
  points        Float         @default(1.0)

  // Metadata
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  examinerId Int
  examiner   User?    @relation(fields: [examinerId], references: [id])

  // Exam usage tracking (many-to-many)
  examQuestions ExamQuestion[] // Questions can be used in multiple exams

  // Analytics
  analytics QuestionAnalytics[]
  answers   Answer[]

  studentAnswers StudentAnswer[]
}

enum QuestionType {
  MULTIPLE_CHOICE
  TRUE_FALSE
  SHORT_ANSWER
  IMAGE_UPLOAD
  FILL_IN_THE_BLANK
}

enum CategoryType {
  SCIENCE
  ENGINEERING
  ARTS_HUMANITIES
  SOCIAL_SCIENCES
  BUSINESS_MANAGEMENT
  GEOGRAPHY
  LAW
  MEDICAL_HEALTH_SCIENCES
  EDUCATION
  AGRICULTURE
  ENVIRONMENTAL_SCIENCES
  COMPUTER_SCIENCE_IT
  ARCHITECTURE
  PHILOSOPHY
  LANGUAGES_LINGUISTICS
  ECONOMICS
  MATHEMATICS
  PHYSICS
  CHEMISTRY
  BIOLOGY
  MUSIC
}

// Junction table for Exam-Question relationship
model ExamQuestion {
  id         Int      @id @default(autoincrement())
  examId     Int
  exam       Exam     @relation(fields: [examId], references: [id])
  questionId Int
  question   Question @relation(fields: [questionId], references: [id])
  order      Int // Order of question in the exam
  points     Float    @default(1.0) // Points for this question in this exam
  createdAt  DateTime @default(now())

  @@unique([examId, questionId]) // Prevent duplicate questions in same exam
  @@index([examId])
  @@index([questionId])
}

model Answer {
  id         Int      @id @default(autoincrement())
  content    String // The content of the answer
  isCorrect  Boolean // Whether this answer is correct
  questionId Int // Relationship to the question this answer belongs to
  question   Question @relation(fields: [questionId], references: [id]) // Link to the Question model
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model StudentAnswer {
  id              Int        @id @default(autoincrement())
  examResultId    Int
  examResult      ExamResult @relation(fields: [examResultId], references: [id])
  questionId      Int
  question        Question   @relation(fields: [questionId], references: [id])
  studentResponse String // Student's actual answer
  isCorrect       Boolean?
  timeSpent       Int? // Time spent on this question
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt

  @@unique([examResultId, questionId]) // One answer per question per exam attempt
}

model Course {
  id             Int             @id @default(autoincrement())
  title          String
  code           String
  description    String?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  courseStudents CourseStudent[]
  examiner       User            @relation("CourseExaminer", fields: [examinerId], references: [id])
  examinerId     Int
  students       Student[]
  exams          Exam[]
  questions      Question[] // ðŸ†• Add this line
  creditHours    Int?
  semester       String?
  isActive       Boolean         @default(true)
  thumbnailUrl   String?

  @@index([title])
  @@index([code])
}

model ExamResult {
  id          Int        @id @default(autoincrement())
  studentId   Int // Relationship to the student who took the exam
  student     Student    @relation(fields: [studentId], references: [id]) // Link to the Student model
  examId      Int // Relationship to the exam taken by the student
  exam        Exam       @relation(fields: [examId], references: [id]) // Link to the Exam model
  score       Float // Score the student received
  status      ExamStatus // Status of the exam (e.g., completed, pending)
  submittedAt DateTime // Timestamp when the exam was submitted
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  //Updated schema 
  totalQuestions Int // Number of questions in exam
  correctAnswers Int // Number of correct answers
  percentage     Float // Calculated percentage score
  timeSpent      Int? // Time taken in seconds
  ipAddress      String? // For security logging
  deviceInfo     String? // Device used for exam
  answers        Json? // Store student's answer data
  studentAnswers StudentAnswer[]

  @@unique([studentId, examId]) // Ensure one result per student per exam
}

enum ExamStatus {
  PENDING
  COMPLETED
  ARCHIVED // Old exam
  IN_PROGRESS
}

// Add the new enum
enum ExamState {
  DRAFT // Being created
  READY // Questions added, ready to publish
  PUBLISHED // Students can see it
  ACTIVE // Currently running
  COMPLETED // Finished
  ARCHIVED // Old exam
}

// For tracking student attendance/participation
model Attendance {
  id        Int      @id @default(autoincrement())
  studentId Int
  student   Student  @relation(fields: [studentId], references: [id])
  examId    Int
  exam      Exam     @relation(fields: [examId], references: [id])
  status    String // "present", "absent", "late"
  timestamp DateTime @default(now())
}

// For system notifications
model Notification {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  title     String
  message   String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  type      String // "info", "warning", "alert"
}

// Added exam session tracking
model ExamSession {
  id         Int       @id @default(autoincrement())
  studentId  Int
  student    Student   @relation(fields: [studentId], references: [id])
  examId     Int
  exam       Exam      @relation(fields: [examId], references: [id])
  startedAt  DateTime  @default(now())
  endedAt    DateTime?
  ipAddress  String?
  userAgent  String?
  isActive   Boolean   @default(true)
  violations Json? // Store any proctoring violations

  @@unique([studentId, examId])
}

//newly added question analytics 
model QuestionAnalytics {
  id               Int      @id @default(autoincrement())
  questionId       Int
  question         Question @relation(fields: [questionId], references: [id])
  examId           Int
  exam             Exam     @relation(fields: [examId], references: [id])
  totalAttempts    Int      @default(0)
  correctAttempts  Int      @default(0)
  averageTime      Float? // Average time spent on this question
  difficultyRating Float? // Calculated difficulty based on performance

  @@unique([questionId, examId])
}

// âœ… ADD: Explicit join table for Course-Student relationship
model CourseStudent {
  id         Int      @id @default(autoincrement())
  courseId   Int
  course     Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  studentId  Int
  student    Student  @relation(fields: [studentId], references: [id], onDelete: Cascade)
  enrolledAt DateTime @default(now())

  @@unique([courseId, studentId]) // Prevent duplicate enrollments
  @@index([courseId])
  @@index([studentId])
}
